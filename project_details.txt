Project Overview:
This project automates the login and logout process for the OrangeHRM demo application using
Selenium WebDriver and Behavior Driven Development (BDD) principles implemented with pytest-bdd. The test scenarios are structured to simulate user interactions with the login page, dashboard, and logout functionality, all while following the Given-When-Then format of Gherkin syntax.

Key Components:
Framework & Tools:

Selenium WebDriver: Used to automate browser interactions and simulate user behavior.
pytest-bdd: Allows for the implementation of BDD tests using a readable format. Test scenarios are written in the Gherkin syntax, making the tests understandable by both technical and non-technical team members.
WebDriver Manager: Automates the setup of the Chrome WebDriver, ensuring compatibility with the browser version.
Feature File (login.feature):

Defines the behavior for testing the OrangeHRM login functionality, including visiting the login page, entering credentials, logging in, and logging out.
Test Workflow:

Login Page: The user is navigated to the OrangeHRM login page.
Credential Input: Valid credentials (Admin/admin123) are entered to simulate a login attempt.
Login Button Click: The login button is clicked, and the system waits for redirection.
Dashboard Verification: The user is redirected to the dashboard page, verifying successful login.
Logout: The user is logged out from the dashboard.
Browser Closure: After completing the tests, the browser is closed.
Python Code Integration:

The test scripts are organized using pytest-bdd to separate test logic from the feature scenarios. Fixtures are used to set up the WebDriver session, manage browser interaction, and ensure that the browser is closed after tests.
Benefits:
Readable Tests: The use of BDD and Gherkin syntax makes the tests highly readable for non-developers.
Maintainable: The separation of test scenarios and logic makes it easier to extend or modify the test cases.
Efficient Automation: Selenium efficiently handles browser interactions, while pytest-bdd ensures that the tests are modular and reusable.